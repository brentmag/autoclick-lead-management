

{
  "name": "autoclick-lead-management",
  "version": "1.0.0",
  "description": "Multi-tenant Kanban workflow management system with CRM integration",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "setup": "node scripts/setup-database.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.3",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "nodemailer": "^6.9.7",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "helmet": "^7.1.0",
    "rate-limiter-flexible": "^3.0.8",
    "uuid": "^9.0.1",
    "mailparser": "^3.6.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

Commit changes

🖥️ Step 3: Replace server.js

Click on server.js in your file list
Click the pencil icon (✏️) to edit
Select ALL content (Ctrl+A) and delete it
Paste this:

javascriptconst express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const path = require('path');
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Email configuration
const emailTransporter = nodemailer.createTransporter({
  host: process.env.EMAIL_HOST || 'smtp.gmail.com',
  port: process.env.EMAIL_PORT || 587,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  }
});

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'"]
    }
  }
}));
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Auto-setup database on start
async function initializeDatabase() {
  try {
    console.log('🔧 Checking database setup...');
    
    // Create dealerships table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS dealerships (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email_domain VARCHAR(255),
        contact_email VARCHAR(255),
        active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // Create users table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        dealership_id INTEGER REFERENCES dealerships(id),
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(50) DEFAULT 'sales_rep',
        active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // Create leads table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS leads (
        id SERIAL PRIMARY KEY,
        dealership_id INTEGER REFERENCES dealerships(id),
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        phone VARCHAR(50),
        vehicle_interest VARCHAR(255),
        status VARCHAR(50) DEFAULT 'new',
        priority VARCHAR(20) DEFAULT 'medium',
        crm_client_id VARCHAR(255),
        crm_url TEXT,
        kanban_card_id VARCHAR(255) UNIQUE,
        kanban_url TEXT,
        assigned_to INTEGER REFERENCES users(id),
        source VARCHAR(50) DEFAULT 'manual',
        notes TEXT,
        created_by INTEGER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // Check if demo data exists
    const dealershipCheck = await pool.query('SELECT COUNT(*) FROM dealerships');
    
    if (dealershipCheck.rows[0].count === '0') {
      console.log('🎯 Creating demo data...');
      
      // Create demo dealership
      const dealershipResult = await pool.query(`
        INSERT INTO dealerships (name, email_domain, contact_email)
        VALUES ('Demo Auto Dealership', 'demo.com', 'admin@demo.com')
        RETURNING id;
      `);
      
      const dealershipId = dealershipResult.rows[0].id;
      
      // Create demo users
      const hashedPassword = await bcrypt.hash('password123', 10);
      
      await pool.query(`
        INSERT INTO users (dealership_id, name, email, password_hash, role)
        VALUES 
        ($1, 'Admin User', 'admin@demo.com', $2, 'admin'),
        ($1, 'Sales Manager', 'manager@demo.com', $2, 'manager'),
        ($1, 'Sales Rep', 'rep@demo.com', $2, 'sales_rep');
      `, [dealershipId, hashedPassword]);
      
      // Create sample leads
      const sampleLeads = [
        {
          name: 'John Smith',
          email: 'john@example.com',
          phone: '(555) 123-4567',
          vehicle_interest: '2024 Honda CR-V',
          status: 'new',
          priority: 'high',
          crm_client_id: 'CRM001',
          crm_url: 'https://your-crm.com/contact/CRM001'
        },
        {
          name: 'Sarah Johnson',
          email: 'sarah@example.com',
          phone: '(555) 987-6543',
          vehicle_interest: '2024 Toyota Camry',
          status: 'contacted',
          priority: 'medium',
          crm_client_id: 'CRM002',
          crm_url: 'https://your-crm.com/contact/CRM002'
        },
        {
          name: 'Mike Wilson',
          email: 'mike@example.com',
          phone: '(555) 456-7890',
          vehicle_interest: '2024 Ford F-150',
          status: 'qualified',
          priority: 'high',
          crm_client_id: 'CRM003',
          crm_url: 'https://your-crm.com/contact/CRM003'
        }
      ];
      
      const adminUser = await pool.query('SELECT id FROM users WHERE email = $1', ['admin@demo.com']);
      const adminId = adminUser.rows[0].id;
      
      for (const lead of sampleLeads) {
        const kanbanCardId = uuidv4();
        const kanbanUrl = `${process.env.BASE_URL || 'http://localhost:3000'}/card/${kanbanCardId}`;
        
        await pool.query(`
          INSERT INTO leads (
            dealership_id, name, email, phone, vehicle_interest,
            status, priority, crm_client_id, crm_url,
            kanban_card_id, kanban_url, created_by, source
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
        `, [
          dealershipId, lead.name, lead.email, lead.phone, lead.vehicle_interest,
          lead.status, lead.priority, lead.crm_client_id, lead.crm_url,
          kanbanCardId, kanbanUrl, adminId, 'sample_data'
        ]);
      }
      
      console.log('✅ Demo data created successfully!');
    } else {
      console.log('✅ Database already initialized');
    }
    
  } catch (error) {
    console.error('❌ Database initialization error:', error);
  }
}

// Authentication middleware
const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');
    const result = await pool.query(
      'SELECT u.*, d.name as dealership_name FROM users u JOIN dealerships d ON u.dealership_id = d.id WHERE u.id = $1',
      [decoded.userId]
    );
    
    if (result.rows.length === 0) {
      return res.status(403).json({ error: 'Invalid token' });
    }
    
    req.user = result.rows[0];
    next();
  } catch (error) {
    return res.status(403).json({ error: 'Invalid token' });
  }
};

// Login
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    const result = await pool.query(
      `SELECT u.*, d.name as dealership_name 
       FROM users u 
       JOIN dealerships d ON u.dealership_id = d.id 
       WHERE u.email = $1 AND u.active = true`,
      [email]
    );
    
    if (result.rows.length === 0) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    const user = result.rows[0];
    const validPassword = await bcrypt.compare(password, user.password_hash);
    
    if (!validPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    const token = jwt.sign(
      { userId: user.id, dealershipId: user.dealership_id, role: user.role },
      process.env.JWT_SECRET || 'fallback-secret',
      { expiresIn: '24h' }
    );
    
    res.json({
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        dealership: user.dealership_name
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get leads
app.get('/api/leads', authenticateToken, async (req, res) => {
  try {
    let query = `
      SELECT l.*, u.name as assigned_to_name
      FROM leads l
      LEFT JOIN users u ON l.assigned_to = u.id
      WHERE l.dealership_id = $1
    `;
    const params = [req.user.dealership_id];
    
    if (req.user.role === 'sales_rep') {
      query += ' AND l.assigned_to = $2';
      params.push(req.user.id);
    }
    
    query += ' ORDER BY l.created_at DESC';
    
    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (error) {
    console.error('Get leads error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Create lead
app.post('/api/leads', authenticateToken, async (req, res) => {
  try {
    const {
      name, email, phone, vehicle_interest, crm_client_id, crm_url,
      priority = 'medium', assigned_to, source = 'manual', notes
    } = req.body;
    
    const kanban_card_id = uuidv4();
    const kanban_url = `${process.env.BASE_URL || 'http://localhost:3000'}/card/${kanban_card_id}`;
    
    const result = await pool.query(
      `INSERT INTO leads (
        dealership_id, name, email, phone, vehicle_interest, 
        crm_client_id, crm_url, kanban_card_id, kanban_url,
        priority, assigned_to, source, notes, created_by
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
      RETURNING *`,
      [
        req.user.dealership_id, name, email, phone, vehicle_interest,
        crm_client_id, crm_url, kanban_card_id, kanban_url,
        priority, assigned_to, source, notes, req.user.id
      ]
    );
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Create lead error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update lead status
app.put('/api/leads/:id/status', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    const result = await pool.query(
      'UPDATE leads SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 AND dealership_id = $3 RETURNING *',
      [status, id, req.user.dealership_id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Lead not found' });
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Update lead status error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get pipeline columns
app.get('/api/pipeline/columns', authenticateToken, async (req, res) => {
  try {
    const defaultColumns = [
      { id: 'new', title: 'New Leads', color: '#3498db', position: 1 },
      { id: 'contacted', title: 'Contacted', color: '#9b59b6', position: 2 },
      { id: 'qualified', title: 'Qualified', color: '#f39c12', position: 3 },
      { id: 'demo', title: 'Demo Scheduled', color: '#e67e22', position: 4 },
      { id: 'proposal', title: 'Proposal Sent', color: '#e74c3c', position: 5 },
      { id: 'negotiating', title: 'Negotiating', color: '#34495e', position: 6 },
      { id: 'closed_won', title: 'Closed Won', color: '#27ae60', position: 7 },
      { id: 'closed_lost', title: 'Closed Lost', color: '#95a5a6', position: 8 }
    ];
    res.json(defaultColumns);
  } catch (error) {
    console.error('Get columns error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Static routes
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/dashboard', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Initialize database and start server
initializeDatabase().then(() => {
  app.listen(PORT, () => {
    console.log(`🚀 AutoClick Lead Management Server running on port ${PORT}`);
    console.log(`📧 Demo Credentials:`);
    console.log(`   Admin: admin@demo.com / password123`);
    console.log(`   Manager: manager@demo.com / password123`);
    console.log(`   Sales Rep: rep@demo.com / password123`);
  });
});

